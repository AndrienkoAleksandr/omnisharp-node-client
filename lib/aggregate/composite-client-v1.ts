// THIS FILE IS GENERATED BY GULP TASK: "sync-clients"
import {Observable} from "rxjs";
import {Models, Events, Context, CombinationKey} from "../omnisharp-server";
import {ClientV1} from "../clients/client-v1";
import {ObservationClientBase, CombinationClientBase} from "./composite-client-base";
import {merge, aggregate} from "../decorators";

export class ObservationClientV1<T extends ClientV1> extends ObservationClientBase<T> implements Events.V1 {
    @merge public get autocomplete(): Observable<Context<Models.AutoCompleteRequest, Models.AutoCompleteResponse[]>> { throw new Error("Implemented by decorator"); }
    @merge public get changebuffer(): Observable<Context<Models.ChangeBufferRequest, any>> { throw new Error("Implemented by decorator"); }
    @merge public get codecheck(): Observable<Context<Models.CodeCheckRequest, Models.QuickFixResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get codeformat(): Observable<Context<Models.CodeFormatRequest, Models.CodeFormatResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get currentfilemembersasflat(): Observable<Context<Models.MembersFlatRequest, Models.QuickFix[]>> { throw new Error("Implemented by decorator"); }
    @merge public get currentfilemembersastree(): Observable<Context<Models.MembersTreeRequest, Models.FileMemberTree>> { throw new Error("Implemented by decorator"); }
    @merge public get filesChanged(): Observable<Context<Models.Request[], Models.FilesChangedResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get findimplementations(): Observable<Context<Models.FindImplementationsRequest, Models.QuickFixResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get findsymbols(): Observable<Context<Models.FindSymbolsRequest, Models.QuickFixResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get findusages(): Observable<Context<Models.FindUsagesRequest, Models.QuickFixResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get fixusings(): Observable<Context<Models.FixUsingsRequest, Models.FixUsingsResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get formatAfterKeystroke(): Observable<Context<Models.FormatAfterKeystrokeRequest, Models.FormatRangeResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get formatRange(): Observable<Context<Models.FormatRangeRequest, Models.FormatRangeResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get getcodeactions(): Observable<Context<Models.GetCodeActionRequest, Models.GetCodeActionsResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get gettestcontext(): Observable<Context<Models.TestCommandRequest, Models.GetTestCommandResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get gotodefinition(): Observable<Context<Models.GotoDefinitionRequest, Models.GotoDefinitionResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get gotofile(): Observable<Context<Models.GotoFileRequest, Models.QuickFixResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get gotoregion(): Observable<Context<Models.GotoRegionRequest, Models.QuickFixResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get highlight(): Observable<Context<Models.HighlightRequest, Models.HighlightResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get metadata(): Observable<Context<Models.MetadataRequest, Models.MetadataResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get navigatedown(): Observable<Context<Models.NavigateDownRequest, Models.NavigateResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get navigateup(): Observable<Context<Models.NavigateUpRequest, Models.NavigateResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get packagesearch(): Observable<Context<Models.PackageSearchRequest, Models.PackageSearchResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get packagesource(): Observable<Context<Models.PackageSourceRequest, Models.PackageSourceResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get packageversion(): Observable<Context<Models.PackageVersionRequest, Models.PackageVersionResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get project(): Observable<Context<Models.v1.ProjectInformationRequest, Models.ProjectInformationResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get projects(): Observable<Context<Models.v1.WorkspaceInformationRequest, Models.WorkspaceInformationResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get rename(): Observable<Context<Models.RenameRequest, Models.RenameResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get runcodeaction(): Observable<Context<Models.RunCodeActionRequest, Models.RunCodeActionResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get signatureHelp(): Observable<Context<Models.SignatureHelpRequest, Models.SignatureHelp>> { throw new Error("Implemented by decorator"); }
    @merge public get typelookup(): Observable<Context<Models.TypeLookupRequest, Models.TypeLookupResponse>> { throw new Error("Implemented by decorator"); }
    @merge public get updatebuffer(): Observable<Context<Models.UpdateBufferRequest, any>> { throw new Error("Implemented by decorator"); }
}

export class AggregateClientV1<T extends ClientV1> extends CombinationClientBase<T> implements Events.Aggregate.V1 {
    @aggregate public get autocomplete(): Observable<CombinationKey<Context<Models.AutoCompleteRequest, Models.AutoCompleteResponse[]>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get changebuffer(): Observable<CombinationKey<Context<Models.ChangeBufferRequest, any>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get codecheck(): Observable<CombinationKey<Context<Models.CodeCheckRequest, Models.QuickFixResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get codeformat(): Observable<CombinationKey<Context<Models.CodeFormatRequest, Models.CodeFormatResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get currentfilemembersasflat(): Observable<CombinationKey<Context<Models.MembersFlatRequest, Models.QuickFix[]>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get currentfilemembersastree(): Observable<CombinationKey<Context<Models.MembersTreeRequest, Models.FileMemberTree>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get filesChanged(): Observable<CombinationKey<Context<Models.Request[], Models.FilesChangedResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get findimplementations(): Observable<CombinationKey<Context<Models.FindImplementationsRequest, Models.QuickFixResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get findsymbols(): Observable<CombinationKey<Context<Models.FindSymbolsRequest, Models.QuickFixResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get findusages(): Observable<CombinationKey<Context<Models.FindUsagesRequest, Models.QuickFixResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get fixusings(): Observable<CombinationKey<Context<Models.FixUsingsRequest, Models.FixUsingsResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get formatAfterKeystroke(): Observable<CombinationKey<Context<Models.FormatAfterKeystrokeRequest, Models.FormatRangeResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get formatRange(): Observable<CombinationKey<Context<Models.FormatRangeRequest, Models.FormatRangeResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get getcodeactions(): Observable<CombinationKey<Context<Models.GetCodeActionRequest, Models.GetCodeActionsResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get gettestcontext(): Observable<CombinationKey<Context<Models.TestCommandRequest, Models.GetTestCommandResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get gotodefinition(): Observable<CombinationKey<Context<Models.GotoDefinitionRequest, Models.GotoDefinitionResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get gotofile(): Observable<CombinationKey<Context<Models.GotoFileRequest, Models.QuickFixResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get gotoregion(): Observable<CombinationKey<Context<Models.GotoRegionRequest, Models.QuickFixResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get highlight(): Observable<CombinationKey<Context<Models.HighlightRequest, Models.HighlightResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get metadata(): Observable<CombinationKey<Context<Models.MetadataRequest, Models.MetadataResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get navigatedown(): Observable<CombinationKey<Context<Models.NavigateDownRequest, Models.NavigateResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get navigateup(): Observable<CombinationKey<Context<Models.NavigateUpRequest, Models.NavigateResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get packagesearch(): Observable<CombinationKey<Context<Models.PackageSearchRequest, Models.PackageSearchResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get packagesource(): Observable<CombinationKey<Context<Models.PackageSourceRequest, Models.PackageSourceResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get packageversion(): Observable<CombinationKey<Context<Models.PackageVersionRequest, Models.PackageVersionResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get project(): Observable<CombinationKey<Context<Models.v1.ProjectInformationRequest, Models.ProjectInformationResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get projects(): Observable<CombinationKey<Context<Models.v1.WorkspaceInformationRequest, Models.WorkspaceInformationResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get rename(): Observable<CombinationKey<Context<Models.RenameRequest, Models.RenameResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get runcodeaction(): Observable<CombinationKey<Context<Models.RunCodeActionRequest, Models.RunCodeActionResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get signatureHelp(): Observable<CombinationKey<Context<Models.SignatureHelpRequest, Models.SignatureHelp>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get typelookup(): Observable<CombinationKey<Context<Models.TypeLookupRequest, Models.TypeLookupResponse>>[]> { throw new Error("Implemented by decorator"); }
    @aggregate public get updatebuffer(): Observable<CombinationKey<Context<Models.UpdateBufferRequest, any>>[]> { throw new Error("Implemented by decorator"); }
}
