import * as OmniSharp from "../../omnisharp-server";
import {AsyncClient} from "../async-client-base";
import {request} from "../../helpers/decorators";

request(AsyncClient.prototype, "getteststartinfo");
request(AsyncClient.prototype, "runtest");
request(AsyncClient.prototype, "autocomplete");
request(AsyncClient.prototype, "changebuffer");
request(AsyncClient.prototype, "codecheck");
request(AsyncClient.prototype, "codeformat");
request(AsyncClient.prototype, "close");
request(AsyncClient.prototype, "open");
request(AsyncClient.prototype, "filesChanged");
request(AsyncClient.prototype, "findimplementations");
request(AsyncClient.prototype, "findsymbols");
request(AsyncClient.prototype, "findusages");
request(AsyncClient.prototype, "fixusings");
request(AsyncClient.prototype, "formatAfterKeystroke");
request(AsyncClient.prototype, "formatRange");
request(AsyncClient.prototype, "getcodeactions");
request(AsyncClient.prototype, "gotodefinition");
request(AsyncClient.prototype, "gotofile");
request(AsyncClient.prototype, "gotoregion");
request(AsyncClient.prototype, "highlight");
request(AsyncClient.prototype, "currentfilemembersasflat");
request(AsyncClient.prototype, "currentfilemembersastree");
request(AsyncClient.prototype, "metadata");
request(AsyncClient.prototype, "navigatedown");
request(AsyncClient.prototype, "navigateup");
request(AsyncClient.prototype, "packagesearch");
request(AsyncClient.prototype, "packagesource");
request(AsyncClient.prototype, "packageversion");
request(AsyncClient.prototype, "rename");
request(AsyncClient.prototype, "runcodeaction");
request(AsyncClient.prototype, "signatureHelp");
request(AsyncClient.prototype, "gettestcontext");
request(AsyncClient.prototype, "typelookup");
request(AsyncClient.prototype, "updatebuffer");
request(AsyncClient.prototype, "project");
request(AsyncClient.prototype, "projects");
request(AsyncClient.prototype, "checkalivestatus");
request(AsyncClient.prototype, "checkreadystatus");
request(AsyncClient.prototype, "stopserver");

declare module "../async-client-base" {
    interface AsyncClient {
        getteststartinfo(request: any, options?: OmniSharp.RequestOptions): Promise<any>;
        runtest(request: any, options?: OmniSharp.RequestOptions): Promise<any>;
        autocomplete(request: OmniSharp.Models.AutoCompleteRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.AutoCompleteResponse[]>;
        changebuffer(request: OmniSharp.Models.ChangeBufferRequest, options?: OmniSharp.RequestOptions): Promise<any>;
        codecheck(request: OmniSharp.Models.V2.CodeCheckRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.V2.CodeCheckResponse>;
        codeformat(request: OmniSharp.Models.CodeFormatRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.CodeFormatResponse>;
        close(request: OmniSharp.Models.FileCloseRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.FileCloseResponse>;
        open(request: OmniSharp.Models.FileOpenRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.FileOpenResponse>;
        filesChanged(request: OmniSharp.Models.Request[], options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.FilesChangedResponse>;
        findimplementations(request: OmniSharp.Models.FindImplementationsRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.QuickFixResponse>;
        findsymbols(request: OmniSharp.Models.FindSymbolsRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.QuickFixResponse>;
        findusages(request: OmniSharp.Models.FindUsagesRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.QuickFixResponse>;
        fixusings(request: OmniSharp.Models.FixUsingsRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.FixUsingsResponse>;
        formatAfterKeystroke(request: OmniSharp.Models.FormatAfterKeystrokeRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.FormatRangeResponse>;
        formatRange(request: OmniSharp.Models.FormatRangeRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.FormatRangeResponse>;
        getcodeactions(request: OmniSharp.Models.V2.GetCodeActionsRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.V2.GetCodeActionsResponse>;
        gotodefinition(request: OmniSharp.Models.GotoDefinitionRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.GotoDefinitionResponse>;
        gotofile(request: OmniSharp.Models.GotoFileRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.QuickFixResponse>;
        gotoregion(request: OmniSharp.Models.GotoRegionRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.QuickFixResponse>;
        highlight(request: OmniSharp.Models.HighlightRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.HighlightResponse>;
        currentfilemembersasflat(request: OmniSharp.Models.MembersFlatRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.QuickFix[]>;
        currentfilemembersastree(request: OmniSharp.Models.MembersTreeRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.FileMemberTree>;
        metadata(request: OmniSharp.Models.MetadataRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.MetadataResponse>;
        navigatedown(request: OmniSharp.Models.NavigateDownRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.NavigateResponse>;
        navigateup(request: OmniSharp.Models.NavigateUpRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.NavigateResponse>;
        packagesearch(request: OmniSharp.Models.PackageSearchRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.PackageSearchResponse>;
        packagesource(request: OmniSharp.Models.PackageSourceRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.PackageSourceResponse>;
        packageversion(request: OmniSharp.Models.PackageVersionRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.PackageVersionResponse>;
        rename(request: OmniSharp.Models.RenameRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.RenameResponse>;
        runcodeaction(request: OmniSharp.Models.V2.RunCodeActionRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.V2.RunCodeActionResponse>;
        signatureHelp(request: OmniSharp.Models.SignatureHelpRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.SignatureHelp>;
        gettestcontext(request: OmniSharp.Models.TestCommandRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.GetTestCommandResponse>;
        typelookup(request: OmniSharp.Models.TypeLookupRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.TypeLookupResponse>;
        updatebuffer(request: OmniSharp.Models.UpdateBufferRequest, options?: OmniSharp.RequestOptions): Promise<any>;
        project(request: OmniSharp.Models.v1.ProjectInformationRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.ProjectInformationResponse>;
        projects(request: OmniSharp.Models.v1.WorkspaceInformationRequest, options?: OmniSharp.RequestOptions): Promise<OmniSharp.Models.WorkspaceInformationResponse>;
        checkalivestatus(options?: OmniSharp.RequestOptions): Promise<boolean>;
        checkreadystatus(options?: OmniSharp.RequestOptions): Promise<boolean>;
        stopserver(options?: OmniSharp.RequestOptions): Promise<boolean>;
    }
}
